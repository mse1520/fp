react를 설치하고 webpack을 사용하기위한 셋팅방법
1. 패키지 생성
npm init > 패키지 초기화
license는 MIT로 설정해줍니다
MIT -> 오픈소스

3. babel 설치하기
npm i -D @babel/core @babel/cli @babel/parser
babel은 최신문법으로 작성된 javascript 소스를 안정적인 문법으로 변경하는 transcompiler입니다
'@babel/core'는 babel 기능을 사용시 필요한 필수 기능들의 집합입니다
'@babel/cli'는 babel을 커맨드라인으로 사용하기 위함입니다
'@babel/parser'은 텍스트로 작성된 코드를 ast으로 변환해줍니다

4. webpack 설치하기
npm i -D webpack webpack-cli
webpack은 여러파일을 하나의 파일로 합쳐주는 번들러입니다

5. 웹팩 설정 추가 기능
npm i -D clean-webpack-plugin
'clean-webpack-plugin'은 번들링 할때 이전에 번들링된 파일을 삭제한다

6. 라이브러리 명령어 정리
npx babel src --out-dir cjs 
  > 'src'폴더 하위의 파일들을 'cjs'폴더 하위에 transcompile 한다
npx webpack 
  > 'webpack' 번들링 실행
npx webpack serve 
  > 'webpack-dev-server' 실행

7. npm 배포
npm update 
  > pakage.json 내의 모든 패키지들을 samver 표기법에 의해 업데이트합니다
npm publish 
  > 내 프로젝트를 npm repository에 업로드 합니다
  업로드할 때는 version의 변경이 있어야 합니다

8. 패키지 명령어 정리
npm test, npm run build 배포에 있어 두 가지의 명령어를 사용하면 됩니다
  npm test
    > src 하위 파일의 내용 변경 시 src/index.js 파일을 생성한다
    test 파일 내의 index.html 파일을 라이브 서버로 바로바로 테스트해 볼 수 있는 환경의 명령어
  npm run build
    > src 폴더를 기준으로 dist 파일과 cjs 파일을 생성한다
  npm run generate-index
    > src/index.js 파일을 생성한다
  npm run transpile-cjs
    > src 폴더를 기준으로 cjs 폴더로 트랜스컴파일 한다
  npm run bundle-min-js
    > src 폴더를 기준으로 dist 파일로 번들 파일을 생성한다

9. 참고
https://astexplorer.net/
ast 분석할때 유용한 사이트